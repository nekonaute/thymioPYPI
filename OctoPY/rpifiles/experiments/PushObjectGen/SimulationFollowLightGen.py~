#!/usr/bin/env/python
# -*- coding: utf-8 -*- 

"""
P_ANDROIDE UPMC 2017
Encadrant : Nicolas Bredeche

@author Tanguy SOTO
@author Parham SHAMS

Comportement évolutionniste de suivi de lumière basé sur VanillaEE
"""
import time
import random
import ast
import logging
import subprocess

import Simulation
import Params

import LightSensor
import Genome

class SimulationFollowLightGen(Simulation.Simulation) :
	def __init__(self, controller, mainLogger) :
		Simulation.Simulation.__init__(self, controller, mainLogger)
		
		# définition de notre niveau de log
		self.mainLogger = mainLogger		
		
		self.SIMU = logging.INFO + 1 
		logging.addLevelName(self.SIMU, "SIMU")
		
		def simu(message, *args, **kws):
		    if self.mainLogger.isEnabledFor(self.SIMU):
		        self.mainLogger._log(self.SIMU, message, args, **kws) 
		self.mainLogger.simu = simu
		
		self.mainLogger.setLevel(self.SIMU)		
		
		self.mainLogger.debug("SimulationFollowLightGen - __init__()")
		
		# initialisations
		self.ls = LightSensor.LightAndTagSensor(self.mainLogger) 	# capteur de lumière
		self.genome = Genome.Genome(mainLogger,size=18) 	# (7 capteurs de proximité, 1 biais, 1 entrée binaire pour la lumière) * 2 (moteurs)
		self.genomeList = []						# liste de couples contenant les génomes reçus et la fitness associée
		self.iter = 1							# nombre d'itérations total
		self.fitness = 0							# fitness du robot
		self.fitnessWindow = []					# valeurs de fitness du robot		
		self.hostname = None						# hostname
		self.tags_ids = []
		self.histo_size = 40

	def preActions(self) :
		self.mainLogger.debug("SimulationFollowLightGen - preActions()")
		
		# hostname 
		if self.hostname == None :
			proc = subprocess.Popen(["hostname"], stdout = subprocess.PIPE, stderr = subprocess.PIPE)
			(out, err) = proc.communicate()
			self.hostname = out.rstrip()
			proc.wait()
		
		# Genome we want to spread
		if self.hostname=="pi3no08":
			genes = Params.params.genome.split(",") # genome que l'on veut appliquer
			for i in range(len(genes)):
				genes[i] = float(genes[i])
		
			self.genome = Genome.Genome(self.mainLogger, geneValue=genes)
		
	
		self.mainLogger.simu("======================================")
		self.mainLogger.simu("====== SimulationFollowLightGen ======")
		self.mainLogger.simu("======================================")
		self.mainLogger.simu("-------------------")
		self.mainLogger.simu("Parameters :")
		self.mainLogger.simu("duration "+str(Params.params.duration))
		self.mainLogger.simu("lifetime "+str(Params.params.lifetime))
		self.mainLogger.simu("sleep "+str(Params.params.wait))
		self.mainLogger.simu("windowSize "+str(Params.params.windowSize))
		self.mainLogger.simu("tournamentSize "+str(Params.params.tournamentSize))
		self.mainLogger.simu("sigma "+str(Params.params.sigma))
		self.mainLogger.simu("-------------------")
		self.mainLogger.simu("Start :")
		
		self.ls.start()		
		
		self.tController.writeSoundRequest([200,1])
		self.waitForControllerResponse()

	def postActions(self) :
		self.mainLogger.debug("SimulationFollowLightGen - postActions()")		
		
		self.mainLogger.simu("-------------------")
		self.mainLogger.simu("End :")
		self.mainLogger.simu("fitness_champion "+str(self.fitness))
		self.mainLogger.simu("champion "+str(self.genome.gene))
		self.mainLogger.simu("======================================")
		
		self.ls.shutdown()

	def step(self) :
		self.mainLogger.debug("SimulationFollowLigtGen - step()")
		
		# evaluation de la génération
		if self.iter%Params.params.lifetime != 0:
			if self.genome!=None:
				self.move()
				self.fitness = self.computeFitness()
				self.broadcast(self.genome,self.fitness)
			
			# réception des (fitness,génome) des autres robots implicite grâce à receiveComMessage()	
		# changement de génération	
		else:
			if self.genome!=None:
				self.mainLogger.simu(str(self.iter/Params.params.lifetime)+" generation ended "+str(self.fitness))
				#self.genome = None
				self.fitnessWindow = []
			
			self.tController.writeMotorsSpeedRequest([0, 0])
			self.waitForControllerResponse()
			
			if len(self.genomeList) > 0:
				self.genome = self.applyVariation(self.select(self.genomeList,Params.params.tournamentSize))
			else:
				self.genome = self.applyVariation(self.genome)

			self.genomeList=[]	
			
		self.iter+=1
		time.sleep(Params.params.wait)
		
		if self.iter==Params.params.duration:
			self.stop()
		
	def getSensors(self):
		
		l = []
		
		self.tController.readSensorsRequest()
		self.waitForControllerResponse()
		proxSensors = self.tController.getPSValues()
		
		for i in range(7):
			l.append(proxSensors[i]/Params.params.maxProxSensorValue)
			
		new_res,res = self.ls.get_data()
		if res!=None:
			self.lightValue = res[0]
			lightLR = res[1]
			
			tags_info = res[2]
			tags_contours, tags_ids, tags_distances, tags_rotations = tags_info
			self.tags_ids.append(tags_ids)
			if len(self.tags_ids)>self.histo_size:
				self.tags_ids.pop(0)
			#self.mainLogger.simu(str(self.tags_ids))
		else:
			self.lightValue, lightLR = (150,1)
			self.tags_ids.append([])
			if len(self.tags_ids)>self.histo_size:
				self.tags_ids.pop(0)	
			
		l.append(lightLR)
	
		return l
		
	"""
	Fonctions de l'algorithme VanillaEE
	"""
	
	def move(self):
		sensors = self.getSensors()
		l, r = self.genome.evaluation(sensors)
		
		self.left=l
		self.right=r
		
		self.tController.writeMotorsSpeedRequest([l, r])
		self.waitForControllerResponse()		
	
	def computeFitness(self):
		w = Params.params.windowSize
		if len(self.fitnessWindow) == w:
			self.fitnessWindow.pop(0)

		# récupération des capteurs
		max_sensors = 0.0
		proxSensors = self.getSensors()[:-1]
		for i in xrange (len(proxSensors)):
			max_sensors = max(max_sensors,proxSensors[i])
								
		speedValue = (self.getTransitiveAcceleration()) * \
				   (1 - self.getAngularAcceleration()) * \
				   (1 - max_sensors)
							
		if speedValue<0:
			speedValue=0					
							
		self.fitnessWindow.append(speedValue)

		#self.mainLogger.info(str((self.getTransitiveAcceleration()))+" "+str((1 - self.getAngularAcceleration()))+" "+str((1 - max_sensors))+" "+str(self.lightValue))		
		
		cur_fit = 0.0
		for f in self.fitnessWindow:
			cur_fit += f	
		
		return cur_fit/len(self.fitnessWindow)
		
	def getTransitiveAcceleration(self):
		return abs(self.left + self.right) / (2*Params.params.maxSpeedValue)
		
	def getAngularAcceleration(self):
		return abs(self.left - self.right) / (2*Params.params.maxSpeedValue)
	
	def broadcast(self,genome,fitness):
		proba = self.fitness
		if(random.random()<proba):		
			try :
				currRecipientsList = self.hostname
				recipientsList = Params.params.hostnames
				recipientsList = recipientsList.split(',')
				idsList = Params.params.ids
				idsList = idsList.split(',')
				
				for i in xrange(len(idsList)):
					for j in self.tags_ids:
						if int(idsList[i]) in j:
							currRecipientsList+=","
							currRecipientsList+=str(recipientsList[i])
							break
				
				myValue = str(fitness)+'$'+str(genome.gene)			
				
				#self.mainLogger.simu("broadcast - "+currRecipientsList)
				self.sendMessage(recipients = recipientsList, value = myValue)              
			except :
				self.mainLogger.error('"SimulationFollowLightGen - error in broadcast()' )
		
	def getGenomeFromOther(self):
		return []
		
	def select(self,genes,k):
		""" 
		Selectionne un genome parmis ceux contenus dans genes, en effectuant un tournoi de taille k
		"""
		
		self.mainLogger.debug("SimulationFollowLigtGen - select()")
		
		l=list(genes)
		l.sort()
		l.reverse()
		l=l[:k]
		
		selectedGene = l[random.randint(0,len(l)-1)][1]
		
		return Genome.Genome(self.mainLogger,geneValue=selectedGene)
		
	def applyVariation(self,selectedGenome):
		return selectedGenome.mutationGaussienne()	
		
	"""
	Fonctions de communications
	"""	
		
	def receiveComMessage(self, data) :
		"""
		'overridée' pour recevoir les messages des autres robots.
		"""
		
		sender = ""
		value = []
		if "senderHostname" in data.keys() :
			sender = data["senderHostname"]
			if sender!=self.hostname:
				if "value" in data.keys():
					value = data["value"].split("$")
					fitness = float(value[0])
					gene = ast.literal_eval(value[1])
					
					self.genomeList.append((fitness,gene))
					
					#self.mainLogger.debug("RECEIVED MESSAGE FROM: " + str(sender)+ "\n MESSAGE :" + str(value))
				else :
					self.mainLogger.error('SimulationFollowLightGen - Receiving message from ' + str(sender) + ' without value data : ' + str(data))
		else :
			self.mainLogger.error('SimulationFollowLightGen - Receiving message without sender : ' + str(data))	
		
		
		#set config_FollowLightGen.cfg
		#put rpifiles/experiments/FollowLightGen ~/dev/thymioPYPI/OctoPY/rpifiles/experiments
		#put rpifiles/experiments/config_FollowLightGen.cfg ~/dev/thymioPYPI/OctoPY/rpifiles/experiments
